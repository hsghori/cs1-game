response,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q8,Q9,Q10,Q11,Q12,Q13,Q14
1,Post Grad,A,Easy,Objects,,Inheritance is great,Functions/Recursion,,Not sure why functions is grouped with recursion. Recursion requires people to think about problems differently ,Doing more coding problems ,Variables,,It was easy for me but maybe not for others ,"I think this would be interesting but I like seeing things visually with examples. If this gaming format provided that, I might find it beneficial."
2,High School,A,Neutral,Algos,,I liked the logic behind ,Functions/Recursion,,.,Practice,Loops,,Easy to understand,Yes for school aged kids with Dyer am motivation to learn. Not for adults with internal motivation.
3,Undergrad,B,Difficult,Other,RDBMS,Interest in analytics ,Algos,,Difficulty in understanding ,More time,Conditional Logic,,Easy understanding,Yes...
4,Post Grad,B,Neutral,Conditional Logic,,"I always felt if one has logic in mind on how to do do things, syntax n available methods can be implemented. Based on that understanding I always felt close to developing conditional logics",Variables,,"Well,I feel difficulty in comprehending the best way to declare method level, class level and global variables.",Still searching,Loops,,I just love writing nested loop..its just natural,That would be super beneficial to every field.
5,Undergrad,A,Easy,Algos,,it was most applicable to solving problems in every day life whether they were computer related or not,Conditional Logic,,"logic can be simplified and complicated in a lot of ways, once you get more than 3 conditionals with a few inputs it can get wild quick",some way of visualizing logic or drawing them out or showing simplification steps like algebra,Variables,,most people are familiar with simple variables from middle school algebra like x = 3 + 5,probably not.  I think learning CS by coding and solving unit tests helps most
6,Undergrad,A,Very Easy,Conditional Logic,,Everything made logical sense.,Objects,,Hard to wrap my head around what an object was.,"Not sure, watched a video where it just clicked.",Variables,,"Similar to algebra, so it was easy to pick up.","Yes, it would have allowed me to see real world uses of it in a controlled environement."
7,Undergrad,A,Neutral,Functions/Recursion,,power of coding,Objects,,abstract,more examples,Lists/Arrays,,straightfoward,yes. it sounds fun
8,Post Grad,A,Neutral,Other,,not sure?,Other,pointers,you have to get a mental model of computer memory working in your head,practice makes perfect,Linked Lists,,not sure,"Probably not, I can learn fine through textbooks, and have the motivation to follow through"
9,Undergrad,A,Easy,Algos,,First exposure to improving performance by being clever.,Other,Dynamic Programming ,Did not understand the representation of states.,If someone had said this axis is the current state.,Loops,,Been doing it for years. Conditional logic and variables in this category also.,I never took a formal class. I learned in my own. Robotics helped Iâ€™m not sure gamefication would have helped.
10,Undergrad,B,Neutral,Conditional Logic,,I used it most frequently.,Algos,,It required a lot of complex mathematical equations.,Provide me background knowledge in computer science.,Conditional Logic,,I knew it better than other topics.,"Not sure because I have not tried it. If I have to say Yes or No, and I will say No, because I do not play games."
11,Undergrad,A,Neutral,Algos,,Because it was helping me to build programming logics,Linked Lists,,In C days it was difficult to keep a track of pointers :) ,learning and practice,Variables,,because it was the first usually we get introduced ,"yes, it will benefits because people will learn without much stress that they are studying rather then they will be happing as they are playing. "
12,Undergrad,A,Neutral,Algos,,the algorithm problem is interesting.,Algos,,its principle is hard to understand,"teachers, friends.",Loops,,"it is easily understand,","Yeah, it will guide to me think about lots of questions rather than just reading the book"
13,High School,A,Neutral,Algos,,Algorithms allow for more high level puzzle solving which I find interesting,Objects,,"the abstraction is difficult to understand sometimes at first, and I've taught undergrads who hit this wall as well","Perhaps more examples, explanations of why it's useful",Conditional Logic,,It's pretty intuitive,"At an intro level it's hard to tell. I think some concepts could be useful, especially with games that enforce repetition and memorization"
14,Undergrad,C,Very Difficult,Conditional Logic,,easiest one to understand,Variables,,defining variable types was hard to understand like void,more intro level training,Conditional Logic,,straightforward,"No, I think the contents are more important than gamification."
15,High School,A,Neutral,Objects,,It was an interesting way of thinking about programmatic structure.,Functions/Recursion,,Recursion is probably the most foreign concept when first learning about programming.,Perhaps better analogies to previously learned material might have helped.,Variables,,"If you take algebra before programming, you know what variables are.",Sure. It might have made things more entertaining and engaging.
16,High School,A,Easy,Algos,,I found it the most fun to solve challenges that involved complex algorithms,Functions/Recursion,,"I remember struggling with recursion a lot before it finally ""clicked"". It probably has to do with the difficulty to visualize and nobody telling me that I will always need a ""base case""","Some more examples, and help visualizing recursion",Variables,,I was able to teach myself variables from books years before taking my first intro to CS class,"Yes, I think this would have inspired me to learn the concepts even more deeply"
17,High School,A,Very Easy,Functions/Recursion,,Usually non trivial and challenging,Algos,,Sometimes requires extensive mathematical understanding,Dedicated Tutor,Conditional Logic,,trivial,Yes because it helps maintain interest and focus
18,Undergrad,A,Difficult,Conditional Logic,,It was fun to create a lot of scenarios that would play out depending on the input.,Functions/Recursion,,Big-O Notation in general and discrete mathematics (not including Boolean logic) was hard for me to grasp.,"I'm not sure. I studied and looked at khan academy videos on youtube. I still got an A, but I feel that it was muscle memory based on examples I completed rather than an understanding.",Loops,,It was an easy concept. Especially loops where an increment occurs.,"I do. The ""fun"" aspect makes it easier to learn while not realizing that you're learning. This could be beneficial as shown by STEM toys for children."
19,Undergrad,A,Easy,Functions/Recursion,,"objects, function",Other,didn't think they are actually hard,N/A,hands on practice,Variables,,easy to understand,no. I prefer reading or watching tutorial videos
20,Undergrad,A,Difficult,Loops,,Felt novel at the time and opened up a new way of understanding how computers do things,Objects,,Not taught in a way that made sense to me,More applications of the topic,Conditional Logic,,Reflected a very natural way of thinking about logic,Yes. I loved programming challenges as part of my intro class. Gamification could have helped extend those challenges and made them a more central focus.
21,Undergrad,B,Difficult,Loops,,it showed the power of automation/computation,Algos,,Algorithms wasn't really taught well. Notation. Too many to grasp each one thoroughly.,Real-world examples. More practical and less theoretical. Use less notation.,Variables,,concept is fairly simple.,Perhaps as a supplement. But I think gamification is overrated.
22,Middle School,A,Difficult,Functions/Recursion,,I think it was a very powerful concept to have functions chained as discrete ops. In math its hard to see the big picture f(x) in isolation etc. But in CS it was about using multiple functions to get some result (f1->f2->f3) and that paradigm for thinking has great implications for problem decomposition.,Algos,,"Professor did not give much context as to what was the use case for this. Discrete mathematics I think would do better with practical application even if it is theoretical. Ex: instead of memorizing algorithm xyz, have students implement an optimal vs unonoptimal version compare the tradeoffs etc.",See the above.,Conditional Logic,,It just made sense intuitively.,"Perhaps. I have learned other subjects through games and find that generally the concepts stick just as well but I am more likely to do repetitive tasks in game form. Meaning, if there is a score involved I will try to improve than instances where progress is harder to measure."
23,Undergrad,B,Neutral,Lists/Arrays,,Processing of data through arrays was interesting. ,Functions/Recursion,,Just Recurions,smaller assignments covering fundamentals,Variables,,super easy. ,"Yes, I had an interesting experience with a git based game and learned it easily that way. "
24,High School,A,Very Easy,Algos,,"It isn't explicitly tied to programming/Computer Science. Algorithms are something we use each and everyday, and being able to think/proceed algorithmically is a critical topic in high school.",Functions/Recursion,,"Recursion is really tough for students to wrap their brains around. If they have some experience from Algebra 2 with recursive sequences, I think this helps.","As mentioned above, some experience in Algebra 2 would be a factor.",Variables,,Most students that have progressed past pre-algebra/algebra should be comfortable with the idea of variables.,I think for me personally yes; but it may not be for everyone. Students with focus/attention issues may not benefit from such a sensory activating experience in the classroom.
25,High School,A,Difficult,Functions/Recursion,,Recursive functions allowed me to expand my thought process into areas not yet explored.,Functions/Recursion,,"Although it was also my favorite, it was fun to think about a problem in a different way.",More practical examples to help visualize the solution.,Loops,,It was easy for me to understand doing a process multiple times.,Yes -- sparking engagement would have helped relate to real-world scenarios and applications.
26,Undergrad,A,Easy,Functions/Recursion,,Liked the use cases,Algos,,They're quite easy to mess up,Better professor?,Variables,,Pretty simple to understand how they work,"Could be fun, which would have provided more interaction/attention from me"
27,Undergrad,A,Easy,Loops,,I was pretty new to the CS world and I liked the idea of repeating tasks without a lot of work.,Functions/Recursion,,"It took me a bit to wrap my head around recursion, especially end conditions.",A better example like Fibonacci,Variables,,They're pretty straightforward not much to understand,Yes because I'm a competitive person
28,Other,A,Neutral,Objects,Not sure if I've ever taken a formal into to CS class.. But I think objects would be my favorite.,It is a very interesting concept at first. ,Functions/Recursion,,Recursion is tricky. ,Maybe some better visuals and examples.,Variables,,Variables are pretty straight forward.,"Yes, games are more fun and interesting."
29,High School,A,Easy,Conditional Logic,,"Fun, challenging, and made a lot of sense.",Lists/Arrays,,Not properly explained until later.,A better introduction.,Variables,,First concept and probably the easiest.,"Somewhat. I was already really engaged because I was excited to learn. If the game a good explanations, it could have been helpful."
30,Post Grad,B,Difficult,Conditional Logic,,it was intuitive and seemed powerful,Algos,,"very abstract, didn't know how to implement",i don't know,Variables,,just very simple,it depends how it is implemented
31,High School,A,Very Easy,Objects,,"Objects allowed for larger constructs, including graphical entities, which allowed for a stronger basis for real-world connections.",Other,Polymorphism,"The initial rules seem to not make sense until you fully grasp the concept, but more importantly most early examples are junk and do not do a good job of making the connections which are needed.","Utilizing interfaces and abstract classes more. Having data structures that held several types of objects, then looping through those and calling only the methods that actually are allowed to be called.",Loops,,Loops require a basic following of a sequence.,"Yes and no. (Disclosure - I have one of the largest CS high student populations in the country). It depends on what Gaming means. Are the kids playing games to learn the material? Then no. Are the kids building games? Yes and no. The stereotype threat of using games to teach is real, it is a turn off to a large population of students (it will likely not increase female enrollment). However, mixing some building of games, lightly, while focusing more on interactive stories or simulations will do a much better job of teaching CS and engaging a much larger variety of students."
32,High School,A,Neutral,Objects,,N/A,Algos,,N/A,N/A,Variables,,N/A,N/A
33,Post Grad,A,Very Easy,Loops,N/A,The ability to do many things very quickly. Productivity.,Objects,N/A,The level of abstraction and forethought that was required,A more advanced and interactive visualization of the concepts involved,Variables,N/A,A very direct connection to simple mathematics and easy to demonstrate examples,Possibly.  Only if motivation outside that of the student is required. Otherwise I can imagine to be seen as gimmicky.
34,Undergrad,A,Easy,Linked Lists,,"I liked the idea of creating a compound data structure right away and the idea of pointers linking a chain of ""small things"" to construct one ""large thing"".",Functions/Recursion,,The notion of recursion is difficult for people to wrap their heads around at first. Structuring problems into sub-problems isn't intuitive at first to many people.,More varied examples for how recursion behaves and how it's used. And interactive visual representation of recursion solving problems would be helpful.,Variables,,"Variables follow from experience with Mathematical concepts such as Algebra, so this was a quick transition.","I believe that it would. I believe that experience has shown from early learning (elementary school) programming classes that visual approaches benefit learning. Creating a highly visual game experience will help immerse folks in concepts, such as recursion, loops, functions, etc."
35,Undergrad,A,Easy,Lists/Arrays,,"Very easy to apply, understand",Algos,,No visual materials,Step-by-step visual material,Conditional Logic,,It's logical and easy to understand,Yes. Level of engagement is higher.
36,Undergrad,B,Difficult,Objects,,"I thought that OOP was such a brilliant concept and that you could make ANYTHING an object.  When I mad this connection (sad to admit how long it took), programming started to make a lot more sense! ",Algos,,I guess the whole O(n) concept was hard for me to understand at first. ,"Better examples, more practice ",Variables,,I just reminded me of algebra,"Yes! Because I love games.  I feel like I would have been able to practice my understanding. I like how games do a lot of ""stuff"" for you, since writing my own programs seemed unfathomable during intro to cs.  "
37,Undergrad,A,Difficult,Loops,,"With something so simple, you can do quite a bit of interesting things with",Objects,,Takes some time to understand the lifecycle and how you can and can't use them,Easily understood instructions for new users,Variables,,They are simple to use and denote,"Possibly, I am not into video games but could see the use of the platform. As long as it is interactive and explanatory"
38,Undergrad,A,Easy,Conditional Logic,,"Because it allowed the program to make decisions, it made it mimic a person's thought process. ",Algos,,"Because they are too many, it was hard for me to memorize and understand the proper use cases.","Better examples for the application of the algo, something more relatable less theoretical. ",Variables,,Because they were the building blocks. There was nothing more basic to me than the variables.,YES!
39,Undergrad,A,Easy,Loops,,It felt the most unique to programming cmopared to concepts id seen already in math,Linked Lists,,This seemed to be one of the more abstract topics,"I'm not sure, possible some engaging examples or examples of how it is applied.",Variables,,was just a very straigforward topic,yes i think this is a very interesting concept.
40,Post Grad,A,Neutral,Conditional Logic,,Felt like I could automate things by creating a set of rules.,Functions/Recursion,,Thinking about a function using itself I found was hard at first.,Maybe more visual explanation.,Loops,,I found picturing a running loop to be relatively easy.,"Yes, probably would make it easier to be engaged."
41,High School,B,Very Difficult,Conditional Logic,,It made the most sense at the time and seemed cool,Functions/Recursion,,I had a hard time understanding how separating the code worked,Better instruction and breakdowns of the topics,Variables,,Straight forward since its similar to math variables,"Yes, gamifying anything helps with learning. "
42,High School,A,Neutral,Functions/Recursion,,I liked the abstraction of functionality.,Objects,,The instructor was terrible.,A better professor.,Variables,,The concept is straightforward.,"I suppose...but I really have no idea how a game format could have made any of it easier. Better visualization might have been helpful, but I don't know how the concepts could be gameified."
43,Post Grad,A,Very Easy,Other,low level languages like C/Assembly,learn how programming languages work,Algos,,bad math background,more logical classes to understand equations for algos,Variables,,shortcuts,na
44,Post Grad,A,Difficult,Loops,,Loops have been very useful in my day to day programming,Functions/Recursion,,Recursion is not intuitive,More examples of how and when it should be used,Variables,,Variables are relatively intuitive,"Yes, I think gamification would be helpful"
45,High School,A,Neutral,Conditional Logic,,"I liked seeing the computer behave in different ways according to input. I enjoyed writing ""questionnaire"" style quizzes and making the computer talk like a human.",Algos,,Just couldn't understand it.,pictures.,Variables,,It was very obvious.,"Possibly, it would have increased my motivation."
