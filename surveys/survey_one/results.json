[
   {
      "id":"1571520446902",
      "text":"When did you take your first formal intro to CS course?",
      "answers":[
         "Post Grad",
         "High School",
         "Undergrad",
         "Post Grad",
         "Undergrad",
         "Undergrad",
         "Undergrad",
         "Post Grad",
         "Undergrad",
         "Undergrad",
         "Undergrad",
         "Undergrad",
         "High School",
         "Undergrad",
         "High School",
         "High School",
         "High School",
         "Undergrad",
         "Undergrad",
         "Undergrad",
         "Undergrad",
         "Middle School",
         "Undergrad",
         "High School",
         "High School",
         "Undergrad",
         "Undergrad",
         "Other",
         "High School",
         "Post Grad",
         "High School",
         "High School",
         "Post Grad",
         "Undergrad",
         "Undergrad",
         "Undergrad",
         "Undergrad",
         "Undergrad",
         "Undergrad",
         "Post Grad",
         "High School",
         "High School",
         "Post Grad",
         "Post Grad",
         "High School"
      ]
   },
   {
      "id":"1571520580084",
      "text":"What grade did you receive",
      "answers":[
         "A",
         "A",
         "B",
         "B",
         "A",
         "A",
         "A",
         "A",
         "A",
         "B",
         "A",
         "A",
         "A",
         "C",
         "A",
         "A",
         "A",
         "A",
         "A",
         "A",
         "B",
         "A",
         "B",
         "A",
         "A",
         "A",
         "A",
         "A",
         "A",
         "B",
         "A",
         "A",
         "A",
         "A",
         "A",
         "B",
         "A",
         "A",
         "A",
         "A",
         "B",
         "A",
         "A",
         "A",
         "A"
      ]
   },
   {
      "id":"1571415166836",
      "text":"Intro to CS was extremely difficult",
      "answers":[
         "Easy",
         "Neutral",
         "Difficult",
         "Neutral",
         "Easy",
         "Very Easy",
         "Neutral",
         "Neutral",
         "Easy",
         "Neutral",
         "Neutral",
         "Neutral",
         "Neutral",
         "Very Difficult",
         "Neutral",
         "Easy",
         "Very Easy",
         "Difficult",
         "Easy",
         "Difficult",
         "Difficult",
         "Difficult",
         "Neutral",
         "Very Easy",
         "Difficult",
         "Easy",
         "Easy",
         "Neutral",
         "Easy",
         "Difficult",
         "Very Easy",
         "Neutral",
         "Very Easy",
         "Easy",
         "Easy",
         "Difficult",
         "Difficult",
         "Easy",
         "Easy",
         "Neutral",
         "Very Difficult",
         "Neutral",
         "Very Easy",
         "Difficult",
         "Neutral"
      ]
   },
   {
      "id":"1571415297246",
      "text":"Which topic was your favorite when taking intro to CS?",
      "answers":[
         "Objects",
         "Algos",
         "Other",
         "Conditional Logic",
         "Algos",
         "Conditional Logic",
         "Functions/Recursion",
         "Other",
         "Algos",
         "Conditional Logic",
         "Algos",
         "Algos",
         "Algos",
         "Conditional Logic",
         "Objects",
         "Algos",
         "Functions/Recursion",
         "Conditional Logic",
         "Functions/Recursion",
         "Loops",
         "Loops",
         "Functions/Recursion",
         "Lists/Arrays",
         "Algos",
         "Functions/Recursion",
         "Functions/Recursion",
         "Loops",
         "Objects",
         "Conditional Logic",
         "Conditional Logic",
         "Objects",
         "Objects",
         "Loops",
         "Linked Lists",
         "Lists/Arrays",
         "Objects",
         "Loops",
         "Conditional Logic",
         "Loops",
         "Conditional Logic",
         "Conditional Logic",
         "Functions/Recursion",
         "Other",
         "Loops",
         "Conditional Logic"
      ]
   },
   {
      "id":"1571502360856",
      "text":"If other, please clarify:",
      "answers":[
         "",
         "",
         "RDBMS",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "Not sure if I've ever taken a formal into to CS class.. But I think objects would be my favorite.",
         "",
         "",
         "",
         "",
         "N/A",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "low level languages like C/Assembly",
         "",
         ""
      ]
   },
   {
      "id":"1571415565409",
      "text":"Why was it your favorite?",
      "answers":[
         "Inheritance is great",
         "I liked the logic behind ",
         "Interest in analytics ",
         "I always felt if one has logic in mind on how to do do things, syntax n available methods can be implemented. Based on that understanding I always felt close to developing conditional logics",
         "it was most applicable to solving problems in every day life whether they were computer related or not",
         "Everything made logical sense.",
         "power of coding",
         "not sure?",
         "First exposure to improving performance by being clever.",
         "I used it most frequently.",
         "Because it was helping me to build programming logics",
         "the algorithm problem is interesting.",
         "Algorithms allow for more high level puzzle solving which I find interesting",
         "easiest one to understand",
         "It was an interesting way of thinking about programmatic structure.",
         "I found it the most fun to solve challenges that involved complex algorithms",
         "Usually non trivial and challenging",
         "It was fun to create a lot of scenarios that would play out depending on the input.",
         "objects, function",
         "Felt novel at the time and opened up a new way of understanding how computers do things",
         "it showed the power of automation/computation",
         "I think it was a very powerful concept to have functions chained as discrete ops. In math its hard to see the big picture f(x) in isolation etc. But in CS it was about using multiple functions to get some result (f1->f2->f3) and that paradigm for thinking has great implications for problem decomposition.",
         "Processing of data through arrays was interesting. ",
         "It isn't explicitly tied to programming/Computer Science. Algorithms are something we use each and everyday, and being able to think/proceed algorithmically is a critical topic in high school.",
         "Recursive functions allowed me to expand my thought process into areas not yet explored.",
         "Liked the use cases",
         "I was pretty new to the CS world and I liked the idea of repeating tasks without a lot of work.",
         "It is a very interesting concept at first. ",
         "Fun, challenging, and made a lot of sense.",
         "it was intuitive and seemed powerful",
         "Objects allowed for larger constructs, including graphical entities, which allowed for a stronger basis for real-world connections.",
         "N/A",
         "The ability to do many things very quickly. Productivity.",
         "I liked the idea of creating a compound data structure right away and the idea of pointers linking a chain of \"small things\" to construct one \"large thing\".",
         "Very easy to apply, understand",
         "I thought that OOP was such a brilliant concept and that you could make ANYTHING an object.  When I mad this connection (sad to admit how long it took), programming started to make a lot more sense! ",
         "With something so simple, you can do quite a bit of interesting things with",
         "Because it allowed the program to make decisions, it made it mimic a person's thought process. ",
         "It felt the most unique to programming cmopared to concepts id seen already in math",
         "Felt like I could automate things by creating a set of rules.",
         "It made the most sense at the time and seemed cool",
         "I liked the abstraction of functionality.",
         "learn how programming languages work",
         "Loops have been very useful in my day to day programming",
         "I liked seeing the computer behave in different ways according to input. I enjoyed writing \"questionnaire\" style quizzes and making the computer talk like a human."
      ]
   },
   {
      "id":"1571415545458",
      "text":"Which topic was the hardest when taking intro to CS?",
      "answers":[
         "Functions/Recursion",
         "Functions/Recursion",
         "Algos",
         "Variables",
         "Conditional Logic",
         "Objects",
         "Objects",
         "Other",
         "Other",
         "Algos",
         "Linked Lists",
         "Algos",
         "Objects",
         "Variables",
         "Functions/Recursion",
         "Functions/Recursion",
         "Algos",
         "Functions/Recursion",
         "Other",
         "Objects",
         "Algos",
         "Algos",
         "Functions/Recursion",
         "Functions/Recursion",
         "Functions/Recursion",
         "Algos",
         "Functions/Recursion",
         "Functions/Recursion",
         "Lists/Arrays",
         "Algos",
         "Other",
         "Algos",
         "Objects",
         "Functions/Recursion",
         "Algos",
         "Algos",
         "Objects",
         "Algos",
         "Linked Lists",
         "Functions/Recursion",
         "Functions/Recursion",
         "Objects",
         "Algos",
         "Functions/Recursion",
         "Algos"
      ]
   },
   {
      "id":"1571502262523",
      "text":"If other, please clarify:",
      "answers":[
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "pointers",
         "Dynamic Programming ",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "didn't think they are actually hard",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "Polymorphism",
         "",
         "N/A",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         ""
      ]
   },
   {
      "id":"1571415588342",
      "text":"Why was it hard?",
      "answers":[
         "Not sure why functions is grouped with recursion. Recursion requires people to think about problems differently ",
         ".",
         "Difficulty in understanding ",
         "Well,I feel difficulty in comprehending the best way to declare method level, class level and global variables.",
         "logic can be simplified and complicated in a lot of ways, once you get more than 3 conditionals with a few inputs it can get wild quick",
         "Hard to wrap my head around what an object was.",
         "abstract",
         "you have to get a mental model of computer memory working in your head",
         "Did not understand the representation of states.",
         "It required a lot of complex mathematical equations.",
         "In C days it was difficult to keep a track of pointers :) ",
         "its principle is hard to understand",
         "the abstraction is difficult to understand sometimes at first, and I've taught undergrads who hit this wall as well",
         "defining variable types was hard to understand like void",
         "Recursion is probably the most foreign concept when first learning about programming.",
         "I remember struggling with recursion a lot before it finally \"clicked\". It probably has to do with the difficulty to visualize and nobody telling me that I will always need a \"base case\"",
         "Sometimes requires extensive mathematical understanding",
         "Big-O Notation in general and discrete mathematics (not including Boolean logic) was hard for me to grasp.",
         "N/A",
         "Not taught in a way that made sense to me",
         "Algorithms wasn't really taught well. Notation. Too many to grasp each one thoroughly.",
         "Professor did not give much context as to what was the use case for this. Discrete mathematics I think would do better with practical application even if it is theoretical. Ex: instead of memorizing algorithm xyz, have students implement an optimal vs unonoptimal version compare the tradeoffs etc.",
         "Just Recurions",
         "Recursion is really tough for students to wrap their brains around. If they have some experience from Algebra 2 with recursive sequences, I think this helps.",
         "Although it was also my favorite, it was fun to think about a problem in a different way.",
         "They're quite easy to mess up",
         "It took me a bit to wrap my head around recursion, especially end conditions.",
         "Recursion is tricky. ",
         "Not properly explained until later.",
         "very abstract, didn't know how to implement",
         "The initial rules seem to not make sense until you fully grasp the concept, but more importantly most early examples are junk and do not do a good job of making the connections which are needed.",
         "N/A",
         "The level of abstraction and forethought that was required",
         "The notion of recursion is difficult for people to wrap their heads around at first. Structuring problems into sub-problems isn't intuitive at first to many people.",
         "No visual materials",
         "I guess the whole O(n) concept was hard for me to understand at first. ",
         "Takes some time to understand the lifecycle and how you can and can't use them",
         "Because they are too many, it was hard for me to memorize and understand the proper use cases.",
         "This seemed to be one of the more abstract topics",
         "Thinking about a function using itself I found was hard at first.",
         "I had a hard time understanding how separating the code worked",
         "The instructor was terrible.",
         "bad math background",
         "Recursion is not intuitive",
         "Just couldn't understand it."
      ]
   },
   {
      "id":"1571415630113",
      "text":"What would have helped you with this topic? ",
      "answers":[
         "Doing more coding problems ",
         "Practice",
         "More time",
         "Still searching",
         "some way of visualizing logic or drawing them out or showing simplification steps like algebra",
         "Not sure, watched a video where it just clicked.",
         "more examples",
         "practice makes perfect",
         "If someone had said this axis is the current state.",
         "Provide me background knowledge in computer science.",
         "learning and practice",
         "teachers, friends.",
         "Perhaps more examples, explanations of why it's useful",
         "more intro level training",
         "Perhaps better analogies to previously learned material might have helped.",
         "Some more examples, and help visualizing recursion",
         "Dedicated Tutor",
         "I'm not sure. I studied and looked at khan academy videos on youtube. I still got an A, but I feel that it was muscle memory based on examples I completed rather than an understanding.",
         "hands on practice",
         "More applications of the topic",
         "Real-world examples. More practical and less theoretical. Use less notation.",
         "See the above.",
         "smaller assignments covering fundamentals",
         "As mentioned above, some experience in Algebra 2 would be a factor.",
         "More practical examples to help visualize the solution.",
         "Better professor?",
         "A better example like Fibonacci",
         "Maybe some better visuals and examples.",
         "A better introduction.",
         "i don't know",
         "Utilizing interfaces and abstract classes more. Having data structures that held several types of objects, then looping through those and calling only the methods that actually are allowed to be called.",
         "N/A",
         "A more advanced and interactive visualization of the concepts involved",
         "More varied examples for how recursion behaves and how it's used. And interactive visual representation of recursion solving problems would be helpful.",
         "Step-by-step visual material",
         "Better examples, more practice ",
         "Easily understood instructions for new users",
         "Better examples for the application of the algo, something more relatable less theoretical. ",
         "I'm not sure, possible some engaging examples or examples of how it is applied.",
         "Maybe more visual explanation.",
         "Better instruction and breakdowns of the topics",
         "A better professor.",
         "more logical classes to understand equations for algos",
         "More examples of how and when it should be used",
         "pictures."
      ]
   },
   {
      "id":"1571415715426",
      "text":"Which topic was the easiest when taking intro to CS?",
      "answers":[
         "Variables",
         "Loops",
         "Conditional Logic",
         "Loops",
         "Variables",
         "Variables",
         "Lists/Arrays",
         "Linked Lists",
         "Loops",
         "Conditional Logic",
         "Variables",
         "Loops",
         "Conditional Logic",
         "Conditional Logic",
         "Variables",
         "Variables",
         "Conditional Logic",
         "Loops",
         "Variables",
         "Conditional Logic",
         "Variables",
         "Conditional Logic",
         "Variables",
         "Variables",
         "Loops",
         "Variables",
         "Variables",
         "Variables",
         "Variables",
         "Variables",
         "Loops",
         "Variables",
         "Variables",
         "Variables",
         "Conditional Logic",
         "Variables",
         "Variables",
         "Variables",
         "Variables",
         "Loops",
         "Variables",
         "Variables",
         "Variables",
         "Variables",
         "Variables"
      ]
   },
   {
      "id":"1571502341821",
      "text":"If other, please clarify:",
      "answers":[
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "N/A",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         ""
      ]
   },
   {
      "id":"1571415758658",
      "text":"Why was it easy?",
      "answers":[
         "It was easy for me but maybe not for others ",
         "Easy to understand",
         "Easy understanding",
         "I just love writing nested loop..its just natural",
         "most people are familiar with simple variables from middle school algebra like x = 3 + 5",
         "Similar to algebra, so it was easy to pick up.",
         "straightfoward",
         "not sure",
         "Been doing it for years. Conditional logic and variables in this category also.",
         "I knew it better than other topics.",
         "because it was the first usually we get introduced ",
         "it is easily understand,",
         "It's pretty intuitive",
         "straightforward",
         "If you take algebra before programming, you know what variables are.",
         "I was able to teach myself variables from books years before taking my first intro to CS class",
         "trivial",
         "It was an easy concept. Especially loops where an increment occurs.",
         "easy to understand",
         "Reflected a very natural way of thinking about logic",
         "concept is fairly simple.",
         "It just made sense intuitively.",
         "super easy. ",
         "Most students that have progressed past pre-algebra/algebra should be comfortable with the idea of variables.",
         "It was easy for me to understand doing a process multiple times.",
         "Pretty simple to understand how they work",
         "They're pretty straightforward not much to understand",
         "Variables are pretty straight forward.",
         "First concept and probably the easiest.",
         "just very simple",
         "Loops require a basic following of a sequence.",
         "N/A",
         "A very direct connection to simple mathematics and easy to demonstrate examples",
         "Variables follow from experience with Mathematical concepts such as Algebra, so this was a quick transition.",
         "It's logical and easy to understand",
         "I just reminded me of algebra",
         "They are simple to use and denote",
         "Because they were the building blocks. There was nothing more basic to me than the variables.",
         "was just a very straigforward topic",
         "I found picturing a running loop to be relatively easy.",
         "Straight forward since its similar to math variables",
         "The concept is straightforward.",
         "shortcuts",
         "Variables are relatively intuitive",
         "It was very obvious."
      ]
   },
   {
      "id":"1571520273376",
      "text":"Do you think learning intro to CS through a gaming format would have been beneficial for you? Please explain why or why not.",
      "answers":[
         "I think this would be interesting but I like seeing things visually with examples. If this gaming format provided that, I might find it beneficial.",
         "Yes for school aged kids with Dyer am motivation to learn. Not for adults with internal motivation.",
         "Yes...",
         "That would be super beneficial to every field.",
         "probably not.  I think learning CS by coding and solving unit tests helps most",
         "Yes, it would have allowed me to see real world uses of it in a controlled environement.",
         "yes. it sounds fun",
         "Probably not, I can learn fine through textbooks, and have the motivation to follow through",
         "I never took a formal class. I learned in my own. Robotics helped I’m not sure gamefication would have helped.",
         "Not sure because I have not tried it. If I have to say Yes or No, and I will say No, because I do not play games.",
         "yes, it will benefits because people will learn without much stress that they are studying rather then they will be happing as they are playing. ",
         "Yeah, it will guide to me think about lots of questions rather than just reading the book",
         "At an intro level it's hard to tell. I think some concepts could be useful, especially with games that enforce repetition and memorization",
         "No, I think the contents are more important than gamification.",
         "Sure. It might have made things more entertaining and engaging.",
         "Yes, I think this would have inspired me to learn the concepts even more deeply",
         "Yes because it helps maintain interest and focus",
         "I do. The \"fun\" aspect makes it easier to learn while not realizing that you're learning. This could be beneficial as shown by STEM toys for children.",
         "no. I prefer reading or watching tutorial videos",
         "Yes. I loved programming challenges as part of my intro class. Gamification could have helped extend those challenges and made them a more central focus.",
         "Perhaps as a supplement. But I think gamification is overrated.",
         "Perhaps. I have learned other subjects through games and find that generally the concepts stick just as well but I am more likely to do repetitive tasks in game form. Meaning, if there is a score involved I will try to improve than instances where progress is harder to measure.",
         "Yes, I had an interesting experience with a git based game and learned it easily that way. ",
         "I think for me personally yes; but it may not be for everyone. Students with focus/attention issues may not benefit from such a sensory activating experience in the classroom.",
         "Yes -- sparking engagement would have helped relate to real-world scenarios and applications.",
         "Could be fun, which would have provided more interaction/attention from me",
         "Yes because I'm a competitive person",
         "Yes, games are more fun and interesting.",
         "Somewhat. I was already really engaged because I was excited to learn. If the game a good explanations, it could have been helpful.",
         "it depends how it is implemented",
         "Yes and no. (Disclosure - I have one of the largest CS high student populations in the country). It depends on what Gaming means. Are the kids playing games to learn the material? Then no. Are the kids building games? Yes and no. The stereotype threat of using games to teach is real, it is a turn off to a large population of students (it will likely not increase female enrollment). However, mixing some building of games, lightly, while focusing more on interactive stories or simulations will do a much better job of teaching CS and engaging a much larger variety of students.",
         "N/A",
         "Possibly.  Only if motivation outside that of the student is required. Otherwise I can imagine to be seen as gimmicky.",
         "I believe that it would. I believe that experience has shown from early learning (elementary school) programming classes that visual approaches benefit learning. Creating a highly visual game experience will help immerse folks in concepts, such as recursion, loops, functions, etc.",
         "Yes. Level of engagement is higher.",
         "Yes! Because I love games.  I feel like I would have been able to practice my understanding. I like how games do a lot of \"stuff\" for you, since writing my own programs seemed unfathomable during intro to cs.  ",
         "Possibly, I am not into video games but could see the use of the platform. As long as it is interactive and explanatory",
         "YES!",
         "yes i think this is a very interesting concept.",
         "Yes, probably would make it easier to be engaged.",
         "Yes, gamifying anything helps with learning. ",
         "I suppose...but I really have no idea how a game format could have made any of it easier. Better visualization might have been helpful, but I don't know how the concepts could be gameified.",
         "na",
         "Yes, I think gamification would be helpful",
         "Possibly, it would have increased my motivation."
      ]
   }
]
