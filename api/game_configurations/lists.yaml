external_id: lists
title: Lists
description: Learn a collection of data and others
status: active
module_number: 3
games:
  - external_id: list_basic
    title: Basic list
    description: Write some basic list
    status: active
    level_number: 0
    inputs: list_pos_int
    num_inputs: 1
    list_input_size: 5
    prompt: >
      So far we've worked with number and text values. But oftentimes you will want to keep track of a list of values.
      A <strong>List</strong> is a data structure which stores an ordered sequence of values.
      <br>
      For example:
      <pre>
        <code class="code">
          A = [1, 2, 3, 4, 5]
        </code>
      </pre>
      stores a list of the integers 1, 2, 3, 4, and 5.
      <br>
      You can use a <strong>For</strong> loop to iterate over each element in a list - instead of iterating over some range
      of values.
      <pre>
        <code class="code">
          A = [1, 2, 3, 4, 5]
          for each item i in [A]:
            [your code]
        </code>
      </pre>
      This will assign the variable <code>i</code> to each value in the list (in the order they are in the list) and
      execute [your code] using <code>i</code>
      <br>
      In the input stream, a list will be represented as a comma delimited set of values all on one line. You can take
      a list in as input in the same way that you would take in any other value. Play around with the list and for loop given
      and see how you can use the for loop to output different values from the list.
      <br>
      <strong>Instructions</strong>
      <br>
      Given an input list of integers, find the sum of the values in the list.
    blocks:
      - variable
      - text
      - output
      - input
      - controls_if
      - math_number
      - math_arithmetic
      - logic_compare
      - logic_boolean
      - controls_forEach
  - external_id: list_index
    title: List with index
    description: Find the index for a maxmum number
    status: active
    level_number: 1
    inputs: list_pos_int
    num_inputs: 1
    list_input_size: 5
    prompt: >
      We have given you a few new blocks to interact with your lists:
      <pre>
        <code class="code">
          A = [1, 2, 3, 4, 5]
        </code>
      </pre>
      <ul>
        <li>The <strong>getIndex</strong> block gets the value of the list at the specific position. These positions - or
            "indexes" start at 0 - so A::getIndex(0) will return the value 1 since that is the first value in the list.
            Be careful when using getIndex - if you use a position that is negative or a postiion that is bigger than the number
            of elements in the list, your code will fail. </li>
        <li>The <strong>length</strong> block gets the number of elements in the list. Note that if A::length = X then the largest position (or index) in
            A is X - 1.</li>
      </ul>
      <strong>Instructions</strong>
      <br>
      Given these new blocks, find the index of the largest element in the provided list.
      <br>
      <strong>Hint:</strong>
      You can use the for loop to iterate over all of the indexes in the list:
      <pre>
        <code>
          count with i from [smallest index] to [largest possible index] by 1:
            value = list::getIndex(i)
        </code>
      </pre>
      This way you can keep track of the index and value of the elements in your program.
    blocks:
      - variable
      - text
      - output
      - input
      - math_arithmetic
      - logic_compare
      - controls_if
      - math_number
      - math_arithmetic
      - lists_getIndex
      - lists_length
      - controls_for
  - external_id: list_minmax
    title: MinMax of List
    description: More list operations
    status: active
    level_number: 2
    inputs: list_int
    num_inputs: 1
    list_input_size: 10
    prompt: >
      <strong>Instructions</strong>
      <br>
      Given a list of 10 integers, first output the largest value in the list. Then output
      the smallest value in the list
    blocks:
      - variable
      - output
      - input
      - math_number
      - text
      - text_join
      - controls_if
      - controls_forEach
      - math_arithmetic
      - logic_compare
  - external_id: list_compare
    title: Compare two lists
    description: Easier list math
    status: active
    level_number: 3
    inputs: list_int
    num_inputs: 2
    list_input_size: 5
    prompt: >
      Luckily you don't have to write for loops every time you want to perform basic operations
      on lists. We have provided you with a <strong>mathOnLists</strong> block which will output the sum, minimum, maximum, etc value in a list of numbers.
      <br>
      <strong>Instructions</strong>
      <br>
      Given two lists listOne and listTwo
      <ul>
        <li>if the sum of the values in listOne is greater than the sum of the values in listTwo output "List One is bigger".
        <li>if the sum of the values in listTwo is greater than the sum of the values in listOne output "List Two is bigger".
        <li>if the lists have the same sum print output "Same size"</li>
      </ul>
    blocks:
      - variable
      - output
      - input
      - text
      - text_join
      - math_number
      - controls_if 
      - controls_for
      - math_modulo
      - math_arithmetic
      - logic_compare
      - math_on_list
  - external_id: list_advanced
    title: Set difference
    description: Find the difference between two lists
    status: active
    level_number: 4
    inputs: list_int
    num_inputs: 2
    list_input_size: 10
    prompt: >
      <strong>Instructions</strong>
      <br>
      Given the two input lists, output all the values that are only in the first list, but not in the second list.
      Don't worry about repeating values (an element can be outputted multiple times).
    blocks:
      - variable
      - output
      - input
      - text
      - text_join
      - math_number
      - controls_if
      - controls_for
      - controls_forEach
      - logic_compare
      - math_on_list # sum,average,min,max for list
      - lists_setIndex
      - lists_getIndex
      - lists_length
      - lists_create_with
