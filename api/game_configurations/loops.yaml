external_id: loops
title: Loops
description: Learn how to make computers repeat themselves
status: active
module_number: 2
games:
  - external_id: for_loops_0
    title: For Loop - basic
    description: Practice a basic with for-loop
    status: active
    level_number: 0
    inputs: pos_int
    num_inputs: 1
    prompt: >
      You can practice basic for-loop with this blockly game.<br>
      <cite>The <strong>for</strong> statement provides a looping structure and it has a counter variable.<br>
      This variable needs to be initialized before the loop begins 
      and then the counter will be incremented by constant number(i.e. 1 or 2) at the end of each iteration.
       </cite>
      <br>
      <li> Instruction</li>
      You will be given a positive integer. Make a Blockly game which prints out numbers sequentially from 0 to the number given.
    blocks:
      - variable
      - output
      - input
      - math_number
      - controls_for
  - external_id: for_if
    title: For Loop with If
    description: Select only even numbers
    status: active
    level_number: 2
    inputs: pos_int
    num_inputs: 1
    prompt: >
      You can practice combination of a for-loop and if condition<br>
      <cite> An even number is an integer which is "evenly divisible" by two.</cite> <br>
      For example, 0,2,4,6, ... are even numbers. and 1,3,5,7, .. are odd numbers<br>
      <li>Instruction</li> 
      You will be given a positive integer. 
      Make a Blockly game which prints out ONLY even numbers sequentially from 0 up until the number given.<br>
      Let's say that you are given a number = 12 
      You only need to print even numbers from 0 to 12.
    blocks:
      - variable
      - output
      - input
      - math_number
      - controls_if
      - controls_whileUntil # while loop
      - controls_for # for loop
      - controls_flow_statements # breakout
      - math_number_property # even
      - math_arithmetic # add, subtract, multiply ..
  - external_id: while_loop
    title: While - advanced for-loop
    description: Print sum of integers from 1 to up until the given integer
    status: active
    level_number: 3
    inputs: pos_int
    num_inputs: 1
    prompt: >
      You can practice a <strong>while</strong>-loop and (counter) variable with this blockly game. <br>
      <cite>In most computer programming languages, a <strong>while</strong> loop is a control flow statement that allows code to be executed repeatedly based on a given Boolean condition. 
      The while loop can be thought of as a repeating if statement. (Wikipedia) </cite>
      <br>
      It is possible to express more dynamic logics with this while loop because a while loop has more powerful looping behaviour than for-loops.<br>
      To execute a <strong>while</strong> statement, the logic first evaluates expression or condition.
      The loop keeps continuing until the condition is true.
      However, if the condition is false, the flow skips over the loop body and moves on to the next statement.
      <li>Instruction</li> 
      You will be given a positive integer <strong>N</strong>. 
      Print the sum of positive integers from 1 to the given integer. <br>
      sum = 1 + 2 + 3 + ... + N
    blocks:
      - variable
      - text
      - output
      - input
      - math_number
      - math_arithmetic
      - logic_compare
      - controls_whileUntil
      - controls_for
  - external_id: while_decimal
    title: While - decimal to binary
    description: Given a passive integer input, print out a specific pattern
    status: active
    level_number: 4
    inputs: pos_int
    num_inputs: 1
    prompt: >
      <cite> Binary is a base 2 number system. <br>
      Base 2 means there are only two digits—1 and 0—which correspond to the on and off states your computer can understand.
      You’re probably familiar with base 10—the decimal system. Decimal makes use of ten digits that range from 0 to 9, 
      and then wraps around to form two-digit numbers, with each digit being worth ten times more than the last (1, 10, 100, etc.).
      Binary is similar, with each digit being worth two times more than the last. <strong>(howtogeek.com)</strong><br>
      <li>Instruction</li> 
      Given a positive number between 0 < <strong>P</strong> < 32 <br>
      Return sequence of binary numbers (i.e. 8 => 1000) <br>
      Print the binary order from lowest base to high and then print 'end' at the end. Take 8 for example; <br>
      >>>0 <br>
      >>>0 <br>
      >>>0 <br>
      >>>1 <br>
      >>>end <br>
    blocks:
      - variable
      - text
      - output
      - input
      - math_number
      - math_arithmetic
      - logic_compare
      - logic_boolean
      - controls_whileUntil
      - controls_repeat_ext
      - math_modulo
      - math_round
  - external_id: while_prime
    title: While - a prime number
    description: Validate a prime number
    status: active
    level_number: 5
    inputs: pos_int
    num_inputs: 1
    prompt: >
      You can create a function which validates a prime number using two sets of blocks <br>
      (1) a nested-loop and (2) a if-condition<br>
      <cite>Let's say that <strong>P</strong> is a prime number (or prime integer, often simply called a "prime" for short)<br>
      if and only if <strong>P</strong> is a positive integer greater than 1 ( <strong>P</strong>  > 1) <br>
      and it has no positive integer divisors other than 1 and <strong>P</strong> itself.  </cite> <br>
      Primes are central in Number theory for many features and/or their applications<br>
      <li>Instruction</li> 
      Given a positive number between 0 < <strong>P</strong> < 100 <br>
      return true / false value based on validation whether or not it's prime.
    blocks:
      - variable
      - text
      - output
      - input
      - controls_if
      - math_number
      - math_arithmetic
      - logic_compare
      - logic_boolean
      - controls_whileUntil
      - controls_flow_statements
      - math_single
      - math_modulo
