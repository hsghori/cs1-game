external_id: loops
title: Loops
description: Learn how to make computers repeat themselves
status: active
module_number: 2
games:
  - external_id: for_loops_0
    title: For Loop - basic
    description: Practice a basic with for-loop
    status: active
    level_number: 0
    inputs: pos_int
    num_inputs: 1
    prompt: >
      The real power of computers comes from their ability to perform repetitive tasks much more quickly than humans. We
      can get a computer to repeat tasks by using <strong>loop</strong> statements.
      <br>
      A <strong>For loop</strong> is the most straightforward type of loop. It has three stages:
      <ol>
        <li>Initialization: set a counter variable to an initial value</li>
        <li>Ending condition: set the limit on the counter variable</li>
        <li>Assignment: set how the counter variable will change between each iteration</li>
      </ol>
      In blockly this kind of structure exists in the <strong>Count with</strong> block.

      <pre class="code">
      <code>
        count with i from [start] to [end] by [change]
          [your code]
      </code>
      </pre>

      The code [your code] will be run once for every value of i from [start] to [end]. Every iteration of the loop will
      change i by the [change] value. So if your loop is:

      <pre class="code">
      <code>
        count with i from 1 to 10 by 2
          [your code]
      </code>
      </pre>

      [your code] will be run first with i = 1, then with i = 3, then with i = 5 until i = 9.
      <br>
      Experiment with the <strong>Count With</strong> block so you understand how it works and how to use it. We have
      provided you with arithmetic and if statement code blocks so you can experiment with using different types of code
      in your for loops.
      <br>
      When you understand how for loops work, print out every integer between 0 and the input value.
    blocks:
      - variable
      - output
      - input
      - math_number
      - controls_for
      - math_arithmetic
      - controls_if
      - logic_compare
      - logic_boolean
  - external_id: for_if
    title: For Loop with If
    description: Select only even numbers
    status: active
    level_number: 1
    inputs: pos_int
    num_inputs: 1
    prompt: >
      Recall that an even number is an integer which is "evenly divisible" by two. That means that if you divide
      an even number by 2, the remainder will be 0. But if you divide an odd number by 2, the remainder will be 1.
      <br>
      For example, 0,2,4,6, ... are even numbers. and 1,3,5,7, .. are odd numbers<br>
      <br>
      The <strong>modulo</strong> operator (<code>%</code>) is a very useful operator in programming. Given two numbers
      A, and B, <code>A % B</code> is equal to the remainder if A were to be divided by B. We have provided you with a
      <strong>modulo</strong> block that performs the modulo operator.
      <br>
      Given a positive integer, output out <strong>only</strong> the even numbers sequentially from 0 up until the number given.
      <br>
      For example, given the number 12 you would output 0, 2, 4, 6, 8, 10, and 12.
    blocks:
      - variable
      - output
      - input
      - math_number
      - controls_if
      - controls_for # for loop
      - math_modulo
      - math_arithmetic # add, subtract, multiply ..
  - external_id: fizz_buzz
    title: FizzBuzz Game
    description: Write the FizzBuzz game
    status: active
    level_number: 2
    inputs: pos_int
    num_inputs: 1
    prompt: >
      Fizz buzz is a group word game for children to teach them about division. <br>
      Players take turns to count incrementally, replacing any number divisible by three with the word "Fizz",
      and any number divisible by five with the word "Buzz". A number that is divisible by both 3 and 5 should be
      replaced with "FizzBuzz".
      <br>
      For example, a typical round of fizz buzz would start as follows: <br>
      1, 2, Fizz, 4, Buzz, Fizz, 7, 8, Fizz, Buzz, 11, Fizz, 13, 14, FizzBuzz, <br>
      16, 17, Fizz, 19, Buzz, Fizz, 22, 23, Fizz, Buzz, 26, Fizz, 28, 29, FizzBuzz, <br>
      31, 32, Fizz, 34, Buzz, Fizz, ...
      <br>
      Output the results of a FizzBuzz game from 1 up to the given input value.
    blocks:
      - variable
      - text
      - output
      - input
      - controls_if
      - controls_for
      - math_number
      - logic_compare
      - math_modulo
  - external_id: while_loop
    title: The while loop
    description: More advanced loops
    status: active
    level_number: 3
    inputs: int
    num_inputs: 10
    prompt: >
      For loops are very useful for simple looping problems. But they are not helpful if you can't calculate the exact number
      of times you want the loop to run. Often times, you want a loop to continue until a specific condition is met.
      The <strong>while</strong> loop is a loop that acts as a repeating if statement. It will keep iterating "while" the condition
      is true.
      <pre class="code">
        <code>
          repeat while [condition]
            [your code]
        </code>
      </pre>
      [your code] will be executed until the [condition] evaluates to false. That means that you need to be careful when writing
      while loops - if you don't do something inside of the loop (like take in new input or change the value of your variables)
      your loop may run forever.
      <br>
      Experiment with the while loop and see how it responds to different conditions.
      <br>
      When you understand how the while loop works print out all the inputs up until the first negative input (there will be at
      least one negative input in the input stream).
    blocks:
      - variable
      - text
      - output
      - input
      - math_number
      - math_arithmetic
      - logic_compare
      - controls_whileUntil
  - external_id: fibonacci
    title: Fibonacci's sequence
    description: Write the fibonacci sequence
    status: active
    level_number: 4
    inputs: pos_int
    num_inputs: 1
    prompt: >
      The fibonacci sequence is a very common sequence in mathematics. It is defined as:
      <ul>
        <li>Fib(0) = 0</li>
        <li>Fib(1) = 1</li>
        <li>Fib(n) = Fib(n - 1) + Fib(n - 2) for all n > 1</li>
      </ul>
      Output each element of the fibonacci sequence up until the input number.
      Don't forget to include the first 0 and 1 in your output (if applicable).
    blocks:
      - variable
      - text
      - output
      - input
      - controls_if
      - math_number
      - math_arithmetic
      - logic_compare
      - logic_boolean
      - controls_whileUntil
      - controls_flow_statements
      - math_single
      - math_modulo
