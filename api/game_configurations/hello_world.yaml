external_id: hello_world
title: Hello World
description: Learn about basic programming principles including input / output and variables
status: active
module_number: 0
games:
  - external_id: intro
    title: Hello World!
    description: Say hello to the world!
    prompt: >
      Let's start off with the basics!
      <br>
      This is your code editor. You will be using it to create small programs using a
      system called Blockly. You will combine the blocks in the "workbench" on the left
      in the "workspace" on the right to create programs.
      <br>
      We have provided you with two blocks:
      <ul>
        <li>
          The <strong>output</strong> block outputs the attached value. You can see outputted values in the green box on the right.
          We will use the values you output to determine if you have written the programs correctly.
        </li>
        <li>
          The <strong>text</strong> block allows you to use text values (otherwise known as strings). You can type anything into the
          text box and use it in your program.
        </li>
      </ul>
      You can hook blocks together to form commands. Try hooking the <strong>output</strong> block to a <strong>text</strong> block
      and click the "Run" button. What happens? What do you see when you type your name in the text box and hit "Run"? What happens
      when you hook two output blocks together vertically and attached different text blocks to the right of each output block?
      <br>
      Experiment with the <strong>output</strong> and <strong>text</strong> blocks. When you understand how the workspace works, use
      the blocks to output the string "Hello world!" and click the "Run and submit" button to check your code.
    blocks:
      - text
      - output
    inputs: none
    num_inputs: 0
    status: active
    level_number: 0
  - external_id: basic_arithmetic
    title: Two plus Two
    description: Relearn that 1st grade math
    status: active
    level_number: 1
    inputs: pos_int
    num_inputs: 2
    prompt: >
      But we can do so much more than print words onto the screen. Computers allow us to do complex math
      quickly and easily.
      <br>
      Yow now have access to three new blocks
      <ul>
        <li>
          The <strong>input</strong> block takes the next value from the input stream. <br>
          An example input stream is located in the blue box on the right - each element in the input stream is on its own
          line. Every time you use the <strong>input</strong> block
          you will be getting the next unused value from the top of the input stream. So the first use of the <strong>input</strong> block
          will give you the first value in the blue box, the second use of the <strong>input</strong> block will give you the second value in the blue box,
          etc. If you use the input box more times than there are input values, your program will fail.
        </li>
        <li>The <strong>number</strong> block gives you access to constant numbers. You can type any number (positive, negative, decimal, etc) into the box to use the number in your program.</li>
        <li>The <strong>arithmetic</strong> block lets you perform basic arithmetic with two numbers. Specifically you can perform addition, subtraction, multiplication, division, and exponents.</li>
      </ul>
      Given these blocks, output the sum of the two provided input values.
      <br>
      <strong>Your code will be run on other input streams so make sure you use the provided blocks and arithmetic operators
      instead of just doing the math yourself</strong>
    blocks:
      - math_arithmetic
      - math_number
      - input
      - output
  - external_id: input_and_variables
    title: Reverse!
    description: Learn about inputs and variables.
    status: active
    level_number: 2
    inputs: pos_int
    num_inputs: 3
    prompt: >
      The input blocks only allow us to access the input one time and in a defined order. But what if you need to
      use an input value more than once or out of order? What if you forget what the inputs represent?
      <br>
      You now have access to a <strong>variable</strong> block which allows you to store specific values as named variables.
      To create a new variable, click the <strong>Create Variable</strong> button in the <strong>Variable</strong> category
      in the workbench.
      <br>
      Now you should have access to blocks to:
      <ul>
        <li><strong>Setter</strong> block - Set the variable to a new value</li>
        <li><strong>Getter</strong> block - Gets the value of the variable</li>
      </ul>
      You can create more than one variable by clicking <strong>Create Variable</strong> again. The setter and getter
      blocks will allow you to toggle between variables and rename your variables.
      <br>
      We have provided the input in a specific order. Use the variable blocks to output the input values in reverse.
      <br>
      Hint: Try creating variables and setting them to your input values.
    blocks:
      - variable
      - input
      - output
  - external_id: input_variables_arithmetic
    title: Variables
    description: Solve for X
    status: active
    level_number: 3
    inputs: pos_int
    num_inputs: 3
    prompt: >
      Consider a ball rolling along the floor. Physics tells us that we can calculate the distance an object has traveled
      using the equation:
      <br>
      distance = speed * time + 0.5 * acceleration * time ^ 2
      <br>
      You will be provided with the following three input values:
      <ol>
        <li>Time - the time the object spends rolling before it stops.</li>
        <li>Speed - the speed at which the object starts rolling.</li>
        <li>Acceleration - the rate at which the speed is increasing.</li>
      </ol>
      <br>
      Output the distance an object rolls given the input values.
      <br>
      Hint: You can use variables to store the results of intermediate steps in this equation.
    blocks:
      - variable
      - math_arithmetic
      - math_number
      - input
      - output
  - external_id: multiply_by_eight
    title: Octopus
    description: Get ready to think hard about some basic math
    level_number: 4
    inputs: pos_int
    num_inputs: 1
    prompt: >
      Programming isn't all complex equations and manipulating inputs. Being a good programming requires that you be able to find
      creative solutions to problems that may seem very simple.
      <br>
      We have given you an <strong>addition-only</strong> block which only performs addition as well as the standard
      variable blocks.
      <br>
      Output the input value multiplied by 8. Then output the input value multiplied by 16.
      <br>
      Hint: You could brute force your way through this problem by chaining 16 additions together. But there is a way to do this
      using only 4 addition blocks.
    status: active
    blocks:
      - variable
      - input
      - output
      - math_addition
